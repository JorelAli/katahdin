
module Brainfuck
{

    function or(e1, e2) {
        if(e1) {
            return true;
        }
        if(e2) {
            return true;
        }
        return false;
    }

    class BrainfuckCode : Statement
    {
        field stack;             // Memory stack
        field index;             // Stack pointer
        field output;            // Output buffer
        field inputIndex;        // Input buffer pointer
        field bracketPairNumber; // What bracket are we looking at? [0 [1 ] ]

        pattern
        {
            option buildTextNodes = true;
            ops:("." | "+" | "-" | "[" | "]" | "," | "<" | ">")+
        }

        method Call(input)
        {
            // Runtime checks to see if we can actually call this function
            if(input.Length == 1) {
                input = input[0];
            } else if(input.Length == 0) {
                input = "";

                for(i = 0; i < this.ops.Count; i++) {
                    if(this.ops[i] == ",") {
                        throw "Invalid number of parameters, function expects 1 but received 0";
                        break;
                    }
                }

            } else {
                throw "Invalid number of parameters, expected 1 but received " + input.Length;
            }

            this.stack = [];
            this.index = 0;
            this.output = "";
            this.inputIndex = 0;
            this.bracketPairNumber = 0;

            // Construct a mapping of square brackets to their corresponding
            // index in the list.
            jumpMap = {};
            for(i = 0; i < this.ops.Count; i++)
            {
                if (this.ops[i] == "[")
                {
                    jumpMap[i] = this.stack.Count;
                    this.stack.Add(0);
                }
                else if (this.ops[i] == "]")
                {
                    jumpMap[this.stack.Count] = i;
                }
            }

            for(i = 0; i < this.ops.Count; i++)
            {
                if(this.ops[i] == "+") {
                    if(this.stack.Count == this.index)
                    {
                        this.stack.Add(0);
                    }
                    this.stack[this.index] = this.stack[this.index]++;
                } else if(this.ops[i] == "-") {
                    this.stack[this.index] = this.stack[this.index]--;
                } else if(this.ops[i] == ">") {
                    this.index = this.index++;
                } else if(this.ops[i] == "<") {
                    this.index = this.index--;
                } else if(this.ops[i] == ".") {
                    this.output = this.output + System.Convert.ToChar(this.stack[this.index]).ToString();
                } else if(this.ops[i] == ",") {
                    this.stack[this.index] = System.Convert.ToInt32(input[this.inputIndex]);
                    this.inputIndex = this.inputIndex++;
                } else if(this.ops[i] == "[") {
                    if(this.stack[this.index] == 0) {
                        // https://www.geeksforgeeks.org/brainfuck-interpreter-java/
                        i++;
                        while(Brainfuck.or(this.bracketPairNumber > 0, this.ops[i] != "]")) {
                            if(this.ops[i] == "[") {
                                this.bracketPairNumber++;
                            } else if(this.ops[i] == "]") {
                                this.bracketPairNumber--;
                            }
                            i++;
                        }
                    }
                } else if(this.ops[i] == "]") {
                    if(this.stack[this.index] != 0) {
                        i--;
                        while(Brainfuck.or(this.bracketPairNumber > 0, this.ops[i] != "[")) {
                            if(this.ops[i] == "]") {
                                this.bracketPairNumber++;
                            } else if(this.ops[i] == "[") {
                                this.bracketPairNumber--;
                            }
                            i--;
                        }
                        i--;
                    }
                }
            }

            return this.output;
        }
    }

    class Program
    {
        // Brainfuck declares functions in the form:
        // brainfuck function <functionName> { <Brainfuck code> }
        pattern
        {
            ("function" | "func" | "fun" | "fn") inputName:Name "{" code:BrainfuckCode "}"
        }

        method Parsed()
        {
            globals.names[this.inputName.name] = this.code;
        }
    }
}

class BrainfuckStatement : Statement
{
    pattern
    {
        ("brainfuck" | "ðŸ§ ðŸ‘‰ðŸ‘Œ") Brainfuck.Program
    }

    method Run()
    {
    }
}
